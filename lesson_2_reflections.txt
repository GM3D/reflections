What happens when you initialize a repository? Why do you need to do it?

* An empty repository is created, which contains no commit. It works that way so that it won't automatically include files you actually don't want to keep track of.

How is the staging area different from the working directory and the repository? What value do you think it offers?

* Staging area is the preparation area for files to be committed. Only files in this area are going to be included in the commit executed next time. It helps to divide changes in the working directory into several commits, each of which consists of a group of changes that represent a logical change to the relevant files.

How can you use the staging area to make sure you have one commit per logical change?

* First add files that are related to the first logical change you want to commit, and after making it sure you have staged all the files, make a commit. Next you stage other files that are related to the second logical change you want to commit, and so on.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

* When you want to try adding an experimental feature while keeping your software working without breaking.
To do so, keep your master branch clean of any untested changes, instead make an experimental branch for any new feature that needs experimenting. After the new functionality gets stable enough to go into the master branch, you could merge the experimental branch into the master.

How do the diagrams help you visualize the branch structure?

* With using git log --graph (possibly with --oneline) [branch names...], you can easily tell how the whole branch structure was developed and at which point each branch was actually created. That would give you the overview of the whole structure of the project you are working on, so that you can tell what you are specifically focusing on and when and which branch to merge your work.
